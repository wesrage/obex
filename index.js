function extend(e){const n=Object.assign({},e);return addedPropertyNames.forEach(e=>{Object.defineProperty(n,e,{configurable:!0,value:obex(n)[e]})}),n}function removeProperties(e){const n=Object.assign({},e);return addedPropertyNames.forEach(e=>delete n[e]),n}export default function obex(e){const n=n=>extend(Object.keys(e).reduce((e,t)=>Object.assign({},e,n(t)),{}));return{map:(t,o)=>n(n=>({[t(n,e[n])]:o(e[n],n)})),mapKeys:t=>n(n=>({[t(n,e[n])]:e[n]})),mapValues:t=>n(n=>({[n]:t(e[n],n)})),filter:t=>n(n=>t(n,e[n])?{[n]:e[n]}:{}),toArray:n=>Object.keys(e).map(t=>n(t,e[t])),keys:()=>Object.keys(e),values:()=>Object.keys(e).map(n=>e[n]),raw:()=>removeProperties(e)}};const addedPropertyNames=Object.keys(obex({}));